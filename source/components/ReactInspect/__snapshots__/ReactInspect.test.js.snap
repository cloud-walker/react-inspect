// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReactInspect component should render properly if data is a function 1`] = `
<styled.pre>
  <styled.span>
    function fun(a) {
  var b = 2;

  console.log('foooooo');
  return a + b;
}
  </styled.span>
</styled.pre>
`;

exports[`ReactInspect component should render properly if data is a number 1`] = `
<styled.pre>
  <styled.span>
    666
  </styled.span>
</styled.pre>
`;

exports[`ReactInspect component should render properly if data is a string 1`] = `
<styled.pre>
  <styled.span>
    "
    cawabongaaa!
    "
  </styled.span>
</styled.pre>
`;

exports[`ReactInspect component should render properly if data is an array 1`] = `
<styled.pre>
  <styled.span>
    [
  </styled.span>
  <styled.div>
    <styled.span>
      undefined
    </styled.span>
  </styled.div>
  <styled.div>
    <styled.span>
      null
    </styled.span>
  </styled.div>
  <styled.div>
    <styled.span>
      666
    </styled.span>
  </styled.div>
  <styled.div>
    <styled.span>
      "
      cawabongaaa!
      "
    </styled.span>
  </styled.div>
  <styled.div>
    <styled.span>
      function fun(a) {
  var b = 2;

  console.log('foooooo');
  return a + b;
}
    </styled.span>
  </styled.div>
  <styled.span>
    ]
  </styled.span>
</styled.pre>
`;

exports[`ReactInspect component should render properly if data is an object 1`] = `
<styled.pre>
  <styled.span>
    {
  </styled.span>
  <styled.div>
    <styled.span>
      und
    </styled.span>
    <styled.span>
      :
    </styled.span>
     
    <styled.span>
      undefined
    </styled.span>
  </styled.div>
  <styled.div>
    <styled.span>
      nil
    </styled.span>
    <styled.span>
      :
    </styled.span>
     
    <styled.span>
      null
    </styled.span>
  </styled.div>
  <styled.div>
    <styled.span>
      num
    </styled.span>
    <styled.span>
      :
    </styled.span>
     
    <styled.span>
      666
    </styled.span>
  </styled.div>
  <styled.div>
    <styled.span>
      str
    </styled.span>
    <styled.span>
      :
    </styled.span>
     
    <styled.span>
      "
      cawabongaaa!
      "
    </styled.span>
  </styled.div>
  <styled.div>
    <styled.span>
      fun
    </styled.span>
    <styled.span>
      :
    </styled.span>
     
    <styled.span>
      function fun(a) {
  var b = 2;

  console.log('foooooo');
  return a + b;
}
    </styled.span>
  </styled.div>
  <styled.div>
    <styled.span>
      arr
    </styled.span>
    <styled.span>
      :
    </styled.span>
     
    <span>
      <styled.span>
        [
      </styled.span>
      <styled.div>
        <styled.span>
          undefined
        </styled.span>
      </styled.div>
      <styled.div>
        <styled.span>
          null
        </styled.span>
      </styled.div>
      <styled.div>
        <styled.span>
          666
        </styled.span>
      </styled.div>
      <styled.div>
        <styled.span>
          "
          cawabongaaa!
          "
        </styled.span>
      </styled.div>
      <styled.div>
        <styled.span>
          function fun(a) {
  var b = 2;

  console.log('foooooo');
  return a + b;
}
        </styled.span>
      </styled.div>
      <styled.span>
        ]
      </styled.span>
    </span>
  </styled.div>
  <styled.div>
    <styled.span>
      obj
    </styled.span>
    <styled.span>
      :
    </styled.span>
     
    <span>
      <styled.span>
        {
      </styled.span>
      <styled.div>
        <styled.span>
          und
        </styled.span>
        <styled.span>
          :
        </styled.span>
         
        <styled.span>
          undefined
        </styled.span>
      </styled.div>
      <styled.div>
        <styled.span>
          nil
        </styled.span>
        <styled.span>
          :
        </styled.span>
         
        <styled.span>
          null
        </styled.span>
      </styled.div>
      <styled.div>
        <styled.span>
          num
        </styled.span>
        <styled.span>
          :
        </styled.span>
         
        <styled.span>
          666
        </styled.span>
      </styled.div>
      <styled.div>
        <styled.span>
          str
        </styled.span>
        <styled.span>
          :
        </styled.span>
         
        <styled.span>
          "
          cawabongaaa!
          "
        </styled.span>
      </styled.div>
      <styled.div>
        <styled.span>
          fun
        </styled.span>
        <styled.span>
          :
        </styled.span>
         
        <styled.span>
          function fun(a) {
  var b = 2;

  console.log('foooooo');
  return a + b;
}
        </styled.span>
      </styled.div>
      <styled.div>
        <styled.span>
          arr
        </styled.span>
        <styled.span>
          :
        </styled.span>
         
        <span>
          <styled.span>
            [
          </styled.span>
          <styled.div>
            <styled.span>
              undefined
            </styled.span>
          </styled.div>
          <styled.div>
            <styled.span>
              null
            </styled.span>
          </styled.div>
          <styled.div>
            <styled.span>
              666
            </styled.span>
          </styled.div>
          <styled.div>
            <styled.span>
              "
              cawabongaaa!
              "
            </styled.span>
          </styled.div>
          <styled.div>
            <styled.span>
              function fun(a) {
  var b = 2;

  console.log('foooooo');
  return a + b;
}
            </styled.span>
          </styled.div>
          <styled.span>
            ]
          </styled.span>
        </span>
      </styled.div>
      <styled.span>
        }
      </styled.span>
    </span>
  </styled.div>
  <styled.span>
    }
  </styled.span>
</styled.pre>
`;

exports[`ReactInspect component should render properly if data is null 1`] = `
<styled.pre>
  <styled.span>
    null
  </styled.span>
</styled.pre>
`;

exports[`ReactInspect component should render properly if data is undefined 1`] = `
<styled.pre>
  <styled.span>
    undefined
  </styled.span>
</styled.pre>
`;
